<Application x:Class="InventarioWPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:InventarioWPF"
             xmlns:pagecs="clr-namespace:InventarioWPF.PageCS"
             xmlns:dragablz="clr-namespace:Dragablz;assembly=Dragablz"
             StartupUri="Login.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- primary color -->
                <ResourceDictionary>
                    <!-- include your primary palette -->
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/MaterialDesignColor.Indigo.xaml" />
                    </ResourceDictionary.MergedDictionaries>
                    <!--
                            include three hues from the primary palette (and the associated forecolours).
                            Do not rename, keep in sequence; light to dark.
                        -->
                    <SolidColorBrush x:Key="PrimaryHueLightBrush" Color="{StaticResource Primary100}"/>
                    <SolidColorBrush x:Key="PrimaryHueLightForegroundBrush" Color="{StaticResource Primary100Foreground}"/>
                    <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="{StaticResource Primary500}"/>
                    <SolidColorBrush x:Key="PrimaryHueMidForegroundBrush" Color="{StaticResource Primary500Foreground}"/>
                    <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="{StaticResource Primary700}"/>
                    <SolidColorBrush x:Key="PrimaryHueDarkForegroundBrush" Color="{StaticResource Primary700Foreground}"/>
                </ResourceDictionary>

                <!-- secondary colour -->
                <ResourceDictionary>
                    <!-- include your secondary pallette -->
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/MaterialDesignColor.Yellow.xaml" />
                    </ResourceDictionary.MergedDictionaries>

                    <!-- include a single secondary accent color (and the associated forecolour) -->
                    <SolidColorBrush x:Key="SecondaryAccentBrush" Color="{StaticResource Accent200}"/>
                    <SolidColorBrush x:Key="SecondaryAccentForegroundBrush" Color="{StaticResource Accent200Foreground}"/>
                </ResourceDictionary>

                <!-- Include the Dragablz Material Design style -->
                <ResourceDictionary Source="pack://application:,,,/Dragablz;component/Themes/materialdesign.xaml"/>

            </ResourceDictionary.MergedDictionaries>

            <!-- tell Dragablz tab control to use the Material Design theme -->
            <Style TargetType="{x:Type dragablz:TabablzControl}" BasedOn="{StaticResource MaterialDesignTabablzControlStyle}" />

            <!-- Datagrid Style-->
            <Style x:Key="DGHeaderStyle" TargetType="{x:Type DataGrid}">
                <Setter Property="ColumnHeaderStyle" Value="{DynamicResource DGCHeaderStyle}"/>
                <Setter Property="CellStyle" Value="{DynamicResource DGCellStyle}"/>
            </Style>

            <Style x:Key="DGCHeaderStyle" TargetType="DataGridColumnHeader">
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="Height" Value="35"/>
                <Setter Property="Background" Value="#e74c3c" />
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="FontSize" Value="18" />
                <Setter Property="FontFamily" Value="Calibri" />
                <Setter Property="Padding" Value="10,5,5,5"/>
            </Style>

            <Style x:Key="DGCellStyle" TargetType="{x:Type DataGridCell}">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="Height" Value="25"/>
                <Style.Triggers>
                    <Trigger Property="DataGridCell.IsSelected" Value="True">
                        <Setter Property="Background" Value="#c0392b" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Crear estilo del visor de elementos -->
            <Style TargetType="{x:Type pagecs:ViewData}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type pagecs:ViewData}">
                            <Border Width="200" Background="#2c3e50">
                                <StackPanel Orientation="Vertical" Margin="10, 5">
                                    <TextBlock Foreground="White" Text="{Binding FirstText, Mode=TwoWay, NotifyOnSourceUpdated=True, NotifyOnValidationError=True,
                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type pagecs:ViewData}}}" FontSize="20"/>
                                    <TextBlock Foreground="White" Margin="10, 0, 0, 0" Grid.Row="1" Text="{Binding SecondText, Mode=TwoWay, NotifyOnSourceUpdated=True, 
                                        NotifyOnValidationError=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type pagecs:ViewData}}}" FontSize="20"/>
                                    <TextBlock x:Name="txtValue" Foreground="White" HorizontalAlignment="Right" Grid.Row="2" Text="{Binding Value, Mode=TwoWay, NotifyOnSourceUpdated=True, 
                                        NotifyOnValidationError=True, RelativeSource={RelativeSource FindAncestor,  AncestorType={x:Type pagecs:ViewData}}}" FontSize="28"/>
                                    <TextBlock x:Name="txtCurrency" Visibility="Hidden" Foreground="White" HorizontalAlignment="Right" Grid.Row="2" Text="{Binding Value, StringFormat=c, Mode=TwoWay, NotifyOnSourceUpdated=True, 
                                        NotifyOnValidationError=True, RelativeSource={RelativeSource FindAncestor,  AncestorType={x:Type pagecs:ViewData}}}" FontSize="28"/>
                                </StackPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Estilos de botones establecidos -->
            <Style x:Key="ButtonStyleGreen" TargetType="{x:Type Button}" >
                <Setter Property="BorderBrush" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="Border" Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Background" Value="#2ecc71"></Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="Gray"></Setter>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#27ae60" TargetName="Border" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#2ecc71" TargetName="Border" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ButtonStyleBlue" TargetType="{x:Type Button}" >
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="Border" Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Background" Value="#3498DB"></Setter>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="Gray"></Setter>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#2980B9" TargetName="Border" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#3498DB" TargetName="Border" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ButtonStyleRed" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="#e74c3c" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="Border" Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#c0392b" TargetName="Border" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#e74c3c" TargetName="Border" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
